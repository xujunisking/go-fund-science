// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/persons/GetPersonByCertID": {
            "get": {
                "description": "根据身份证号获取人员信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "显示人员信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "certID",
                        "name": "certID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ComPerson"
                        }
                    },
                    "400": {
                        "description": "{\"msg\": \"error info\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/persons/GetPersonByID": {
            "get": {
                "description": "根据人员ID获取人员信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "显示人员信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ComPerson"
                        }
                    },
                    "400": {
                        "description": "{\"msg\": \"error info\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/persons/GetPersonByPersonName": {
            "get": {
                "description": "根据人员姓名获取人员信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "显示人员信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "personName",
                        "name": "personName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ComPerson"
                        }
                    },
                    "400": {
                        "description": "{\"msg\": \"error info\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ComPerson": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "cert_id": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "education": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "ID      uuid.UUID  ` + "`" + `gorm:\"primarykey;column:id\" form:\"id\" json:\"id\"` + "`" + `",
                    "type": "string"
                },
                "mobile": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "person_name": {
                    "type": "string"
                },
                "person_state": {
                    "type": "integer"
                },
                "remark": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "unit_id": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "this is go-gin-gorm example.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
